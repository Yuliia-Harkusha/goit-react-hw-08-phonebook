{"version":3,"file":"static/js/690.2e6fc2ce.chunk.js","mappings":"6OAKaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAmBjB,OACE,SAAC,KAAD,CACEC,cAPkB,CACpBC,MAAO,GACPC,SAAU,IAMRC,SApBiB,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfT,GACEU,EAAAA,EAAAA,IAAM,CACJP,MAAOK,EAAKG,SAASR,MAAMS,MAC3BR,SAAUI,EAAKG,SAASP,SAASQ,QAItC,EAWGC,iBAAkBC,EAAAA,EAHpB,SAKG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,aAAcC,EAAzB,EAAyBA,aAAcC,EAAvC,EAAuCA,YAAaC,EAApD,EAAoDA,aAApD,OACC,UAAC,KAAD,CAAMd,SAAUY,EAAcG,aAAa,MAA3C,WACE,sCAEE,kBACEC,KAAK,QACLC,KAAK,QACLC,YAAY,SACZC,SAAUR,EACVJ,MAAOG,EAAOZ,SAEhB,SAAC,KAAD,CAAcmB,KAAK,QAAQG,UAAU,YAEvC,yCAEE,kBACEJ,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,SAAUR,EACVJ,MAAOG,EAAOW,WAEhB,SAAC,KAAD,CAAcJ,KAAK,WAAWG,UAAU,YAE1C,mBAAQJ,KAAK,SAASM,SAAUR,EAAcS,QAASV,EAAvD,sBAxBH,GA+BN,EC5Dc,SAASW,IACtB,OACE,0BACE,SAAC9B,EAAD,KAGL,C,4FCNYe,EAAkBgB,EAAAA,KAAaC,MAAM,CAChD5B,MAAO2B,EAAAA,KAAa3B,QAAQ6B,WAC5B5B,SAAU0B,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIF,aAG3BG,EAAqBL,EAAAA,KAAaC,MAAM,CACnDT,KAAMQ,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIF,WAClC7B,MAAO2B,EAAAA,KAAa3B,QAAQ6B,WAC5B5B,SAAU0B,EAAAA,KAAaG,IAAI,GAAGC,IAAI,IAAIF,Y","sources":["components/LoginForm/LoginForm.jsx","pages/Login.js","utils/validationSchema.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport { userLoginSchema } from 'utils/validationSchema';\nimport { logIn } from 'redux/auth/operations';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    // form.reset();\n  };\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onFormSubmit}\n      validationSchema={userLoginSchema}\n    >\n      {({ values, handleChange, handleSubmit, handleReset, isSubmitting }) => (\n        <Form onSubmit={handleSubmit} autoComplete=\"off\">\n          <label>\n            Email\n            <input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"E-mail\"\n              onChange={handleChange}\n              value={values.email}\n            />\n            <ErrorMessage name=\"email\" component=\"div\" />\n          </label>\n          <label>\n            Password\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n              value={values.pasword}\n            />\n            <ErrorMessage name=\"password\" component=\"div\" />\n          </label>\n          <button type=\"submit\" disabled={isSubmitting} onClick={handleReset}>\n            Log In\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <LoginForm />\n    </div>\n  );\n}\n","import * as yup from 'yup';\n\nexport const userLoginSchema = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().min(6).max(16).required(),\n});\n\nexport const userRegisterSchema = yup.object().shape({\n  name: yup.string().min(2).max(30).required(),\n  email: yup.string().email().required(),\n  password: yup.string().min(6).max(16).required(),\n});\n"],"names":["LoginForm","dispatch","useDispatch","initialValues","email","password","onSubmit","e","preventDefault","form","currentTarget","logIn","elements","value","validationSchema","userLoginSchema","values","handleChange","handleSubmit","handleReset","isSubmitting","autoComplete","type","name","placeholder","onChange","component","pasword","disabled","onClick","Login","yup","shape","required","min","max","userRegisterSchema"],"sourceRoot":""}